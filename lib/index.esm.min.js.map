{"version":3,"file":"index.esm.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * 尝试多次调用一个函数，如果失败则重试，直到成功或超过重试次数\r\n *\r\n * @param fn 需要调用的函数，它应该返回一个Promise\r\n * @param params 调用函数时使用的参数\r\n * @param times 最大重试次数，默认为40次\r\n * @param delay 每次重试之间的延迟时间（毫秒），默认为1600ms\r\n *\r\n * @returns 当函数调用成功时解决Promise，否则拒绝Promise\r\n */\r\nexport const retry = async (fn, params = {}, times = 40, delay = 1600) => {\r\n    return new Promise((resolve, reject) => {\r\n        const tFn = function () {\r\n            fn(params)\r\n                .then(resolve)\r\n                .catch((e) => {\r\n                if (times-- > 0) {\r\n                    console.log(`还有${times}次机会`);\r\n                    setTimeout(tFn, delay);\r\n                }\r\n                else {\r\n                    reject(e);\r\n                }\r\n            });\r\n        };\r\n        return tFn();\r\n    });\r\n};\r\n"],"names":["retry","async","fn","params","times","delay","Promise","resolve","reject","tFn","then","catch","e","console","log","setTimeout"],"mappings":"AAUY,MAACA,EAAQC,MAAOC,EAAIC,EAAS,CAAA,EAAIC,EAAQ,GAAIC,EAAQ,OACtD,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAM,WACRP,EAAGC,GACEO,KAAKH,GACLI,OAAOC,IACJR,KAAU,GACVS,QAAQC,IAAI,KAAKV,QACjBW,WAAWN,EAAKJ,IAGhBG,EAAOI,EACV,GAEjB,EACQ,OAAOH,GAAK"}