{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * 尝试多次调用一个函数，如果失败则重试，直到成功或超过重试次数\r\n *\r\n * @param fn 需要调用的函数，它应该返回一个Promise\r\n * @param params 调用函数时使用的参数\r\n * @param times 最大重试次数，默认为40次\r\n * @param delay 每次重试之间的延迟时间（毫秒），默认为1600ms\r\n *\r\n * @returns 当函数调用成功时解决Promise，否则拒绝Promise\r\n */\r\nexport const retry = async (fn, params = {}, times = 40, delay = 1600) => {\r\n    return new Promise((resolve, reject) => {\r\n        const tFn = function () {\r\n            fn(params)\r\n                .then(resolve)\r\n                .catch((e) => {\r\n                if (times-- > 0) {\r\n                    console.log(`还有${times}次机会`);\r\n                    setTimeout(tFn, delay);\r\n                }\r\n                else {\r\n                    reject(e);\r\n                }\r\n            });\r\n        };\r\n        return tFn();\r\n    });\r\n};\r\n"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,KAAK,GAAG,OAAO,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK;AAC1E,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,QAAQ,MAAM,GAAG,GAAG,YAAY;AAChC,YAAY,EAAE,CAAC,MAAM,CAAC;AACtB,iBAAiB,IAAI,CAAC,OAAO,CAAC;AAC9B,iBAAiB,KAAK,CAAC,CAAC,CAAC,KAAK;AAC9B,gBAAgB,IAAI,KAAK,EAAE,GAAG,CAAC,EAAE;AACjC,oBAAoB,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACjD,oBAAoB,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC3C,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,SAAS,CAAC;AACV,QAAQ,OAAO,GAAG,EAAE,CAAC;AACrB,KAAK,CAAC,CAAC;AACP;;;;"}